product8[is.na(price_lag_6)]$price_lag_6 <-mean(product8[is.na(price_lag_6)]$price_lag_6)
product8[is.na(price_lag_7)]$price_lag_7 <-mean(product8[is.na(price_lag_7)]$price_lag_7)
product8[is.na(price_lag_4), price_lag_4:= mean(price) ]
product8[is.na(price_lag_5), price_lag_5:= mean(price) ]
product8[is.na(price_lag_6), price_lag_6:= mean(price) ]
product8[is.na(price_lag_7), price_lag_7:= mean(price) ]
product8[, sqrt:= sqrt(sold_count)]
lambda <- BoxCox.lambda(product8$sold_count)
product8[, BoxCox := BoxCox(sold_count,lambda = lambda)]
test_dates <- tail(product8,15)$event_date
nextday <- tail(product8,1)
train8 <-  product8[!(event_date %in% test_dates)]
test_dates <- test_dates[1:14]
test8 <- product8[event_date %in% test_dates][1:14]
forecast_ahead <- 1
autoplot(ts(product8$sold_count))
lm8 <- lm( sold_count ~ price +   visit_count + basket_count + category_favored  +  factor( w_day )  + factor(mon)  + lag1 + lag2  + price_lag_4, train8)
summary(lm8)
checkresiduals(lm8)
plot(train8$sold_count, lm8$fitted)
ggplot() + geom_line(data = train8, aes(x = event_date, y = sold_count), color = "blue") + geom_line( aes( x = train8$event_date,y = lm8$fitted), color = "red")
autoplot(ts(product8$sqrt))
sqrt_lm8 <- lm(sqrt ~ price + visit_count  + basket_count +  category_favored + factor(w_day) + factor(mon) + lag1, data = train8)
summary(sqrt_lm8)
checkresiduals(sqrt_lm8)
plot(train8$sold_count, (sqrt_lm8$fitted)^2)
ggplot() + geom_line(data = train8, aes(x = event_date, y = sold_count), color = "blue") + geom_line( aes( x = train8$event_date,y = (sqrt_lm8$fitted)^2), color = "red")
autoplot(ts(product8$BoxCox))
BoxCox_lm8 <- lm(BoxCox~ price + visit_count  +  basket_count  + category_favored + factor( w_day ) + factor(mon) + lag1,train8)
summary(BoxCox_lm8)
checkresiduals(BoxCox_lm8)
plot(train8$sold_count, InvBoxCox(BoxCox_lm8$fitted, lambda = lambda))
ggplot() + geom_line(data = train8, aes(x = event_date, y = sold_count), color = "blue") +
geom_line( aes( x = train8$event_date,y = InvBoxCox(BoxCox_lm8$fitted, lambda = lambda)), color = "red")
forecast_lm8=function(data,forecast_data){
fitted_lm=lm( sold_count ~ price +   visit_count + basket_count + category_favored  +  factor( w_day )  + factor(mon)  + lag1 + lag2  + price_lag_4,data)
forecasted=predict(fitted_lm,forecast_data)
return(list(forecast=as.numeric(forecasted),model=fitted_lm))
}
forecast_lm8_sqrt=function(data,forecast_data){
fitted_lm=lm(sqrt ~ price + visit_count  + basket_count +  category_favored + factor(w_day) + factor(mon) + lag1,data)
forecasted=predict(fitted_lm,forecast_data)
return(list(forecast=as.numeric(forecasted),model=fitted_lm))
}
forecast_BoxCox8=function(data,forecast_data){
fitted_lm=lm(BoxCox~ price + visit_count  +  basket_count  + category_favored + factor( w_day ) + factor(mon) + lag1, data)
forecasted=  forecasted=predict(fitted_lm,forecast_data)
return(list(forecast=as.numeric(forecasted),model=fitted_lm))
}
sqrt_forecasted_sold<- c()
BoxCox_forecasted_sold <- c()
lm_forecasted_sold <- c()
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
sqrt_forecasted_sold[i]<- (forecasted$forecast)^2
forecasted=forecast_lm8(past_data,forecast_data)
lm_forecasted_sold[i]<- forecasted$forecast
forecasted=forecast_BoxCox8(past_data,forecast_data)
BoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
}
prediction8 <- data.table("event_date" = test_dates,lm_forecasted_sold,sqrt_forecasted_sold,BoxCox_forecasted_sold)
#prediction8[, combine1 := (3*lm_forecasted_sold+2*sqrt_forecasted_sold)/5]
for(i in 2:length(prediction8)){
print(accu(test8$sold_count,prediction8[,..i],colnames(prediction8[,..i])))
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction8,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction8,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction8,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox"))
#geom_line(data = prediction8,aes( x = event_date,y =combine1, color = "Combine1"))
temp <- tail(product8[,c(1,5,6,7,8,9,10,11,12,13)],15)
test8[,c(1,5,6,7,8,9,10,11,12,13)] <- temp[1:14]
testsqrt_forecasted_sold<- c()
testBoxCox_forecasted_sold <- c()
testlm_forecasted_sold <- c()
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=test8[i]
forecasted=forecast_lm8(past_data,forecast_data)
testlm_forecasted_sold[i]<- forecasted$forecast
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
testsqrt_forecasted_sold[i]<- forecasted$forecast^2
forecasted=forecast_BoxCox8(past_data,forecast_data)
if (InvBoxCox(forecasted$forecast, lambda = lambda) < 0 || InvBoxCox(forecasted$forecast, lambda = lambda) > (testsqrt_forecasted_sold[i] +testlm_forecasted_sold[i])){
testBoxCox_forecasted_sold[i] <- (testsqrt_forecasted_sold[i] +testlm_forecasted_sold[i])/2
}
else {
testBoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
}
}
testprediction8 <- data.table("event_date" = test_dates,testlm_forecasted_sold,testsqrt_forecasted_sold,testBoxCox_forecasted_sold)
for(i in 2:length(testprediction8)){
print(accu(test8$sold_count,testprediction8[,..i],colnames(testprediction8[,..i])))
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = testprediction8,aes( x = event_date,y =testsqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = testprediction8,aes( x = event_date,y =testlm_forecasted_sold, color = "No Transformation")) +
geom_line(data = testprediction8,aes( x = event_date,y =testBoxCox_forecasted_sold, color = "BoxCox"))
# geom_line(data = testprediction8,aes( x = event_date,y =combine1, color = "Combine1"))
#my_data <- product8[, 4:13]
#chart.Correlation(my_data, pch=19)
xreg8 <- product8[ , c( "price","visit_count",  "basket_count","category_favored" )]
xreg8 <- as.matrix(xreg8)
add_arima=function(data,h,f){
ts <- ts(data$sold_count,frequency =f )
add <- decompose(ts, type = "add")
fitted <- auto.arima(add$random, seasonal= FALSE)
seasonal <- add$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(add$trend[!is.na(add$trend)],1)
forecastted <- as.numeric(forecast(fitted,h)$mean) + seasonal + trend
return(forecastted)
}
xreg_add_arima=function(data,h,f, xreg){
ts <- ts(data$sold_count,frequency =f )
add <- decompose(ts, type = "add")
train_xreg<- xreg[1:length(data$event_date)]
for_xreg <- xreg[(length(data$event_date))]
fitted <- auto.arima(add$random, seasonal= FALSE, xreg = train_xreg)
seasonal <- add$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(add$trend[!is.na(add$trend)],1)
forecastted <- as.numeric(forecast(fitted,h,xreg = for_xreg)$mean) + seasonal + trend
return(forecastted)
}
mul_arima=function(data,h,f){
ts <- ts(data$sold_count,frequency =f )
mul <- decompose(ts, type = "mul")
fitted <- auto.arima(mul$random, seasonal= FALSE)
seasonal <- mul$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(mul$trend[!is.na(mul$trend)],1)
forecasted <- as.numeric(forecast(fitted,h)$mean)*seasonal*trend
return(forecasted)
}
xreg_mul_arima=function(data,h,f, xreg){
ts <- ts(data$sold_count,frequency =f )
mul <- decompose(ts, type = "mul")
train_xreg<- xreg[1:length(data$event_date)]
for_xreg <- xreg[(length(data$event_date)) ]
fitted <- auto.arima(mul$random, seasonal= FALSE, xreg = train_xreg)
seasonal <- mul$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(mul$trend[!is.na(mul$trend)],1)
forecastted <- as.numeric(forecast(fitted,h,xreg = for_xreg)$mean)*seasonal*trend
return(forecastted)
}
testprediction8[, add_arima_forecasted := 0]
testprediction8[ , mul_arima_forecasted := 0]
testprediction8[, reg_add_arima_forecasted := 0]
testprediction8[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
testprediction8$add_arima_forecasted[i] <- add_arima(past_data,1,7)
testprediction8$reg_add_arima_forecasted[i] <- xreg_add_arima(past_data,1,7,xreg8)
testprediction8$mul_arima_forecasted[i] <- mul_arima(past_data,1,7)
testprediction8$reg_mul_arima_forecasted[i] <- xreg_mul_arima(past_data,1,7,xreg8)
}
#testprediction8 [ ,combine2 := (3*testlm_forecasted_sold+5*testsqrt_forecasted_sold + 1*reg_mul_arima_forecasted)/9]
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = testprediction8,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = testprediction8,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = testprediction8,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = testprediction8,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))
# geom_line(data = testprediction8,aes( x = event_date,y =combine2 , color = "combine2"))
testprediction8[,actual:= product8[event_date %in% test_dates]$sold_count]
#melted_result=melt(testprediction8,c('event_date','actual'))
error8 =  data.table()
for(i in 2:(length(testprediction8))){
error8 <- rbind(error8, accu(test8$sold_count,testprediction8[,..i],colnames(testprediction8[,..i])))
}
## forcast next day
xreg <- as.matrix( nextday[ , c( "price","visit_count",  "basket_count","category_favored")])
add_arima(product8,1,8)
mul_arima(product8,1,8)
xreg_mul_arima(product8,1,8, xreg8)
xreg_add_arima(product8,1,8, xreg8)
forecast_lm8(product8,nextday)$forecast
InvBoxCox(forecast_BoxCox8(product8,nextday)$forecast, lambda = lambda)
(forecast_lm8_sqrt(product8,nextday)$forecast)^2
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
testprediction8$add_arima_forecasted[i] <- round(add_arima(past_data,1,7),0)
testprediction8$reg_add_arima_forecasted[i] <- round(xreg_add_arima(past_data,1,7,xreg8),0)
testprediction8$mul_arima_forecasted[i] <- round( mul_arima(past_data,1,7),0)
testprediction8$reg_mul_arima_forecasted[i] <- round( xreg_mul_arima(past_data,1,7,xreg8),0)
}
View(testprediction8)
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=test8[i]
forecasted=forecast_lm8(past_data,forecast_data)
testlm_forecasted_sold[i]<-  round(forecasted$forecast,0)
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
testsqrt_forecasted_sold[i]<- round(forecasted$forecast^2,0)
forecasted=forecast_BoxCox8(past_data,forecast_data)
if (InvBoxCox(forecasted$forecast, lambda = lambda) < 0 || InvBoxCox(forecasted$forecast, lambda = lambda) > (testsqrt_forecasted_sold[i] +testlm_forecasted_sold[i])){
testBoxCox_forecasted_sold[i] <- (testsqrt_forecasted_sold[i] +testlm_forecasted_sold[i])/2
}
else {
testBoxCox_forecasted_sold[i]<- round( InvBoxCox(forecasted$forecast, lambda = lambda),0)
}
}
testprediction8 <- data.table("event_date" = test_dates,testlm_forecasted_sold,testsqrt_forecasted_sold,testBoxCox_forecasted_sold)
for(i in 2:length(testprediction8)){
print(accu(test8$sold_count,testprediction8[,..i],colnames(testprediction8[,..i])))
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = testprediction8,aes( x = event_date,y =testsqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = testprediction8,aes( x = event_date,y =testlm_forecasted_sold, color = "No Transformation")) +
geom_line(data = testprediction8,aes( x = event_date,y =testBoxCox_forecasted_sold, color = "BoxCox"))
# geom_
#my_data <- product8[, 4:13]
#chart.Correlation(my_data, pch=19)
xreg8 <- product8[ , c( "price","visit_count",  "basket_count","category_favored" )]
xreg8 <- as.matrix(xreg8)
add_arima=function(data,h,f){
ts <- ts(data$sold_count,frequency =f )
add <- decompose(ts, type = "add")
fitted <- auto.arima(add$random, seasonal= FALSE)
seasonal <- add$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(add$trend[!is.na(add$trend)],1)
forecastted <- as.numeric(forecast(fitted,h)$mean) + seasonal + trend
return(forecastted)
}
xreg_add_arima=function(data,h,f, xreg){
ts <- ts(data$sold_count,frequency =f )
add <- decompose(ts, type = "add")
train_xreg<- xreg[1:length(data$event_date)]
for_xreg <- xreg[(length(data$event_date))]
fitted <- auto.arima(add$random, seasonal= FALSE, xreg = train_xreg)
seasonal <- add$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(add$trend[!is.na(add$trend)],1)
forecastted <- as.numeric(forecast(fitted,h,xreg = for_xreg)$mean) + seasonal + trend
return(forecastted)
}
mul_arima=function(data,h,f){
ts <- ts(data$sold_count,frequency =f )
mul <- decompose(ts, type = "mul")
fitted <- auto.arima(mul$random, seasonal= FALSE)
seasonal <- mul$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(mul$trend[!is.na(mul$trend)],1)
forecasted <- as.numeric(forecast(fitted,h)$mean)*seasonal*trend
return(forecasted)
}
xreg_mul_arima=function(data,h,f, xreg){
ts <- ts(data$sold_count,frequency =f )
mul <- decompose(ts, type = "mul")
train_xreg<- xreg[1:length(data$event_date)]
for_xreg <- xreg[(length(data$event_date)) ]
fitted <- auto.arima(mul$random, seasonal= FALSE, xreg = train_xreg)
seasonal <- mul$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(mul$trend[!is.na(mul$trend)],1)
forecastted <- as.numeric(forecast(fitted,h,xreg = for_xreg)$mean)*seasonal*trend
return(forecastted)
}
testprediction8[, add_arima_forecasted := 0]
testprediction8[ , mul_arima_forecasted := 0]
testprediction8[, reg_add_arima_forecasted := 0]
testprediction8[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
testprediction8$add_arima_forecasted[i] <- round(add_arima(past_data,1,7),0)
testprediction8$reg_add_arima_forecasted[i] <- round(xreg_add_arima(past_data,1,7,xreg8),0)
testprediction8$mul_arima_forecasted[i] <- round( mul_arima(past_data,1,7),0)
testprediction8$reg_mul_arima_forecasted[i] <- round( xreg_mul_arima(past_data,1,7,xreg8),0)
}
#testprediction8 [ ,combine2 := (3*testlm_forecasted_sold+5*testsqrt_forecasted_sold + 1*reg_mul_arima_forecasted)/9]
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = testprediction8,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = testprediction8,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = testprediction8,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = testprediction8,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))
# geom_line(data = testprediction8,aes( x = event_date,y =combine2 , color = "combine2"))
testprediction8[,actual:= product8[event_date %in% test_dates]$sold_count]
#melted_result=melt(testprediction8,c('event_date','actual'))
error8 =  data.table()
for(i in 2:(length(testprediction8))){
error8 <- rbind(error8, accu(test8$sold_count,testprediction8[,..i],colnames(testprediction8[,..i])))
}
## forcast next day
xreg <- as.matrix( nextday[ , c( "price","visit_count",  "basket_count","category_favored")])
add_arima(product8,1,8)
mul_arima(product8,1,8)
xreg_mul_arima(product8,1,8, xreg8)
xreg_add_arima(product8,1,8, xreg8)
forecast_lm8(product8,nextday)$forecast
InvBoxCox(forecast_BoxCox8(product8,nextday)$forecast, lambda = lambda)
(forecast_lm8_sqrt(product8,nextday)$forecast)^2
View(error8)
View(error8)
View(prediction8)
View(testprediction8)
View(error8)
product9 <- products[[9]]
summary(product9)
product9[is.na(price)]$price <- mean(product9[(!is.na(price)) & (price>= 0) ]$price)
product9[price<=0]$price <- mean(product9[!is.na(price)]$price)
product9[,trend := 1:.N]
product9[ty_visits==1, ty_visits:= mean(ty_visits)]
product9 [, lag1:= shift(sold_count,1)]
product9[is.na(lag1), lag1 := 0]
product9 [, lag2:= shift(sold_count,2)]
product9[is.na(lag2), lag2 := mean(sold_count[1]) ]
product9 [, lag3:= shift(sold_count,3)]
product9[is.na(lag3), lag3 := mean(sold_count[1:2]) ]
product9 [, lag7:= shift(sold_count,7)]
product9[is.na(lag7), lag7 := mean(sold_count[1:6]) ]
product9[, sqrt:= sqrt(sold_count)]
lambda <- BoxCox.lambda(product9$sold_count)
product9[, BoxCox := BoxCox(sold_count,lambda = lambda)]
test_dates <- tail(product9,15)$event_date
nextday <- tail(product9,1)
train9 <-  product9[!(event_date %in% test_dates)]
test_dates <- test_dates[1:14]
test9 <- product9[event_date %in% test_dates][1:14]
forecast_ahead <- 1
autoplot(ts(product9$sold_count))
lm9 <- lm( sold_count ~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold  + factor(w_day)  + factor(mon) + trend  +   lag1 +  lag3   ,product9[4:.N] )
summary(lm9)
checkresiduals(lm9)
autoplot(ts(product9$sqrt))
sqrt_lm <- lm(sqrt~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3     , product9[4:.N] )
summary(sqrt_lm)
checkresiduals(sqrt_lm)
autoplot(ts(product9$BoxCox))
BoxCox_lm <- lm(BoxCox~price  +  visit_count    +  basket_count  + favored_count  + category_visits + category_basket  + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3
, product9[4:.N] )
summary(BoxCox_lm)
checkresiduals(BoxCox_lm)
autoplot(ts(product9$sold_count))
lm9 <- lm( sold_count ~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold  + factor(w_day)  + factor(mon) + trend  +   lag1 +  lag3  + factor(is_campaign), train9)
summary(lm9)
checkresiduals(lm9)
plot(train9$sold_count, lm9$fitted)
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count), color = "blue") + geom_line( aes( x = train9$event_date,y = lm9$fitted), color = "red")
autoplot(ts(product9$sqrt))
sqrt_lm9 <- lm(sqrt ~  price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3 + factor(is_campaign), data = train9)
summary(sqrt_lm9)
checkresiduals(sqrt_lm9)
plot(train9$sold_count, (sqrt_lm9$fitted)^2)
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count), color = "blue") + geom_line( aes( x = train9$event_date,y = (sqrt_lm9$fitted)^2), color = "red")
autoplot(ts(product9$BoxCox))
BoxCox_lm9 <- lm(BoxCox~ price  +  visit_count    +  basket_count  + favored_count  + category_visits + category_basket  + ty_visits + factor(w_day)  + factor(mon)  + factor(is_campaign)+   lag1 +  lag3 ,train9)
summary(BoxCox_lm9)
checkresiduals(BoxCox_lm9)
plot(train9$sold_count, InvBoxCox(BoxCox_lm9$fitted, lambda = lambda))
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count), color = "blue") +
geom_line( aes( x = train9$event_date,y = InvBoxCox(BoxCox_lm9$fitted, lambda = lambda)), color = "red")
forecast_lm9=function(data,forecast_data){
fitted_lm=lm( sold_count ~ price  + basket_count  + category_sold  + category_favored  + factor(w_day)  + factor(mon) + trend  +   lag1 +  lag3  + factor(is_campaign),data)
forecasted=predict(fitted_lm,forecast_data)
return(list(forecast=as.numeric(forecasted),model=fitted_lm))
}
forecast_lm9_sqrt=function(data,forecast_data){
fitted_lm=lm(sqrt ~  price  +  basket_count  + category_sold  + category_favored + factor(w_day)  + factor(mon)  +   lag1 +  lag3 + factor(is_campaign),data)
forecasted=predict(fitted_lm,forecast_data)
return(list(forecast=as.numeric(forecasted),model=fitted_lm))
}
forecast_BoxCox9=function(data,forecast_data){
fitted_lm=lm(BoxCox~ price    +  basket_count  + category_sold  + category_favored   + ty_visits + factor(w_day)  + factor(mon)  + factor(is_campaign)+   lag1 +  lag3, data)
forecasted=  forecasted=predict(fitted_lm,forecast_data)
return(list(forecast=as.numeric(forecasted),model=fitted_lm))
}
sqrt_forecasted_sold<- c()
BoxCox_forecasted_sold <- c()
lm_forecasted_sold <- c()
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product9[event_date<=current_date]
forecast_data=product9[event_date==test_dates[i]]
forecasted=forecast_lm9_sqrt(past_data,forecast_data)
sqrt_forecasted_sold[i]<- (forecasted$forecast)^2
forecasted=forecast_lm9(past_data,forecast_data)
lm_forecasted_sold[i]<- forecasted$forecast
forecasted=forecast_BoxCox9(past_data,forecast_data)
BoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
}
prediction9 <- data.table("event_date" = test_dates,lm_forecasted_sold,sqrt_forecasted_sold,BoxCox_forecasted_sold)
#prediction9[, combine1 := (3*lm_forecasted_sold+2*sqrt_forecasted_sold)/5]
for(i in 2:length(prediction9)){
print(accu(test9$sold_count,prediction9[,..i],colnames(prediction9[,..i])))
}
ggplot() + geom_line(data = product9[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction9,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction9,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction9,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox"))
#geom_line(data = prediction9,aes( x = event_date,y =combine1, color = "Combine1"))
temp <- tail(product9[,c(1,5,6,7,8,9,10,11,12,13)],15)
test9[,c(1,5,6,7,8,9,10,11,12,13)] <- temp[1:14]
testsqrt_forecasted_sold<- c()
testBoxCox_forecasted_sold <- c()
testlm_forecasted_sold <- c()
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product9[event_date<=current_date]
forecast_data=test9[i]
forecasted=forecast_lm9_sqrt(past_data,forecast_data)
testsqrt_forecasted_sold[i]<- forecasted$forecast^2
forecasted=forecast_BoxCox9(past_data,forecast_data)
testBoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
forecasted=forecast_lm9(past_data,forecast_data)
testlm_forecasted_sold[i]<- forecasted$forecast
}
testprediction9 <- data.table("event_date" = test_dates,testlm_forecasted_sold,testsqrt_forecasted_sold,testBoxCox_forecasted_sold)
for(i in 2:length(testprediction9)){
print(accu(test9$sold_count,testprediction9[,..i],colnames(testprediction9[,..i])))
}
ggplot() + geom_line(data = product9[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = testprediction9,aes( x = event_date,y =testsqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = testprediction9,aes( x = event_date,y =testlm_forecasted_sold, color = "No Transformation")) +
geom_line(data = testprediction9,aes( x = event_date,y =testBoxCox_forecasted_sold, color = "BoxCox"))
# geom_line(data = testprediction9,aes( x = event_date,y =combine1, color = "Combine1"))
xreg9 <- product9[ , c( "price","category_sold",  "basket_count","category_favored" )]
xreg9 <- as.matrix(xreg9)
add_arima=function(data,h,f){
ts <- ts(data$sold_count,frequency =f )
add <- decompose(ts, type = "add")
fitted <- auto.arima(add$random, seasonal= FALSE)
seasonal <- add$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(add$trend[!is.na(add$trend)],1)
forecastted <- as.numeric(forecast(fitted,h)$mean) + seasonal + trend
return(forecastted)
}
xreg_add_arima=function(data,h,f, xreg){
ts <- ts(data$sold_count,frequency =f )
add <- decompose(ts, type = "add")
train_xreg<- xreg[1:length(data$event_date)]
for_xreg <- xreg[(length(data$event_date))]
fitted <- auto.arima(add$random, seasonal= FALSE, xreg = train_xreg)
seasonal <- add$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(add$trend[!is.na(add$trend)],1)
forecastted <- as.numeric(forecast(fitted,h,xreg = for_xreg)$mean) + seasonal + trend
return(forecastted)
}
mul_arima=function(data,h,f){
ts <- ts(data$sold_count,frequency =f )
mul <- decompose(ts, type = "mul")
fitted <- auto.arima(mul$random, seasonal= FALSE)
seasonal <- mul$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(mul$trend[!is.na(mul$trend)],1)
forecasted <- as.numeric(forecast(fitted,h)$mean)*seasonal*trend
return(forecasted)
}
xreg_mul_arima=function(data,h,f, xreg){
ts <- ts(data$sold_count,frequency =f )
mul <- decompose(ts, type = "mul")
train_xreg<- xreg[1:length(data$event_date)]
for_xreg <- xreg[(length(data$event_date)) ]
fitted <- auto.arima(mul$random, seasonal= FALSE, xreg = train_xreg)
seasonal <- mul$seasonal[(length(data$sold_count)-f): (length(data$sold_count)-f+h-1)]
trend <- tail(mul$trend[!is.na(mul$trend)],1)
forecastted <- as.numeric(forecast(fitted,h,xreg = for_xreg)$mean)*seasonal*trend
return(forecastted)
}
testprediction9[, add_arima_forecasted := 0]
testprediction9[ , mul_arima_forecasted := 0]
testprediction9[, reg_add_arima_forecasted := 0]
testprediction9[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product9[event_date<=current_date]
forecast_data=product9[event_date==test_dates[i]]
testprediction9$add_arima_forecasted[i] <- add_arima(past_data,1,7)
testprediction9$reg_add_arima_forecasted[i] <- xreg_add_arima(past_data,1,7,xreg9)
testprediction9$mul_arima_forecasted[i] <- mul_arima(past_data,1,7)
testprediction9$reg_mul_arima_forecasted[i] <- xreg_mul_arima(past_data,1,7,xreg9)
}
#testprediction9 [ ,combine2 := (3*testlm_forecasted_sold+5*testsqrt_forecasted_sold + 1*reg_mul_arima_forecasted)/9]
ggplot() + geom_line(data = product9[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = testprediction9,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = testprediction9,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = testprediction9,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = testprediction9,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))
# geom_line(data = testprediction9,aes( x = event_date,y =combine2 , color = "combine2"))
#testprediction9[,actual:= product9[event_date %in% test_dates]$sold_count]
#melted_result=melt(testprediction9,c('event_date','actual'))
error9 =  data.table()
for(i in 2:(length(testprediction9))){
error9 <- rbind(error9, accu(test9$sold_count,testprediction9[,..i],colnames(testprediction9[,..i])))
}
## forcast next day
add_arima(product9,1,7)
mul_arima(product9,1,7)
xreg_mul_arima(product9,1,7, xreg9)
xreg_add_arima(product9,1,7, xreg9)
forecast_lm9(product9,nextday)$forecast
InvBoxCox(forecast_BoxCox9(product9,nextday)$forecast, lambda = lambda)
(forecast_lm9_sqrt(product9,nextday)$forecast)^2
View(testprediction9)
View(testprediction9)
testprediction9[,actual:= product9[event_date %in% test_dates]$sold_count]
View(prediction9)
View(testprediction9)
View(error9)
add_arima(product9,1,7)
mul_arima(product9,1,7)
xreg_mul_arima(product9,1,7, xreg9)
xreg_add_arima(product9,1,7, xreg9)
forecast_lm9(product9,nextday)$forecast
InvBoxCox(forecast_BoxCox9(product9,nextday)$forecast, lambda = lambda)
(forecast_lm9_sqrt(product9,nextday)$forecast)^2
View(product7)
View(test8)
View(test9)
