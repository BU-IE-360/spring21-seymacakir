type="upper", order="hclust",
addCoef.col = "black",
tl.col="black", tl.srt=45,
diag=FALSE
)
corr <- product8[, c("sold_count","price", "price_lag_1","price_lag_4","price_lag_5", "price_lag_6")]
corrplot(cor(corr), method="color",
type="upper", order="hclust",
addCoef.col = "black",
tl.col="black", tl.srt=45,
diag=FALSE
)
autoplot(ts(product8$sold_count))
lm8 <- lm( sold_count ~ price +   visit_count + basket_count + category_favored  +  factor( w_day )  + factor(mon)  + lag1 + lag2  + price_lag_4, train8)
summary(lm8)
checkresiduals(lm8)
ggplot() + geom_line(data = train8, aes(x = event_date, y = sold_count, color = "Actual")) + geom_line( aes( x = train8$event_date,y = (lm8$fitted), color = "Fitted"))+ labs(
x= "sales",
y= "sales",
main = "Actual vs. Fitted Values for LM model with no transformation"
) + theme_minimal()
autoplot(ts(product8$sqrt))
product8[, sqrt:= sqrt(sold_count)]
lambda <- BoxCox.lambda(product8$sold_count)
product8[, BoxCox := BoxCox(sold_count,lambda = lambda)]
test_dates <- tail(product8,15)$event_date
nextday <- tail(product8,1)
train8 <-  product8[!(event_date %in% test_dates)]
test_dates <- test_dates[1:14]
test8 <- product8[event_date %in% test_dates][1:14]
forecast_ahead <- 1
autoplot(ts(product8$sqrt))
sqrt_lm8 <- lm(sqrt ~ price + visit_count  + basket_count +  category_favored + factor(w_day) + factor(mon) + lag1, data = train8)
summary(sqrt_lm8)
checkresiduals(sqrt_lm8)
ggplot() + geom_line(data = train8, aes(x = event_date, y = sold_count, color = "Actual")) + geom_line( aes( x = train8$event_date,y = (sqrt_lm8$fitted)^2, color = "Fitted"))+ labs(
x= "sales",
y= "sales",
main = "Actual vs. Fitted Values for LM model with no transformation"
) + theme_minimal()
summary(lm8)
checkresiduals(lm8)
sqrt_lm8 <- lm(sqrt ~ price + visit_count  + basket_count +  category_favored + factor(w_day) + factor(mon) + lag1 +lag5, data = train8)
summary(sqrt_lm8)
checkresiduals(sqrt_lm8)
lm8 <- lm( sold_count ~ price +   visit_count + basket_count + category_favored  +  factor( w_day )  + factor(mon)  + lag1 + lag2  + lag5 + price_lag_4, train8)
summary(lm8)
checkresiduals(lm8)
sqrt_lm8 <- lm(sqrt ~ price + visit_count  + basket_count +  category_favored + factor(w_day) + factor(mon) + lag1 +lag5, data = train8)
summary(sqrt_lm8)
checkresiduals(sqrt_lm8)
lm8 <- lm( sold_count ~ price +   visit_count + basket_count + category_favored  +  factor( w_day )  + factor(mon)  + lag1 + lag2  + price_lag_4, train8)
summary(lm8)
checkresiduals(lm8)
autoplot(ts(product8$BoxCox))
BoxCox_lm8 <- lm(BoxCox~ price + visit_count  +  basket_count  + category_favored + factor( w_day ) + factor(mon) + lag1,train8)
summary(BoxCox_lm8)
checkresiduals(BoxCox_lm8)
summary(BoxCox_lm8)
ggplot() + geom_line(data = train8, aes(x = event_date, y = sold_count, color = "Actual")) + geom_line( aes( x = train8$event_date,y = InvBoxCox(BoxCox_lm8$fitted.values,lambda), color = "Fitted"))+ labs(
x= "sales",
y= "sales",
main = "Actual vs. Fitted Values for LM model with sqrt transformation"
) + theme_minimal()
print("The Additive Model")
decomposed <- decompose(ts(product8$sold_count,frequency= 7))
ur.kpss(decomposed$random)
print("The Multiplicative Model")
ur.kpss(decompose(ts(product8$sold_count,frequency= 7), type="mul")$random)
print("Linear Regression")
residuals <- residuals(lm8)
ur.kpss(residuals)
print("The Additive Model")
decomposed <- decompose(ts(product8$sold_count,frequency= 7))
ur.kpss(decomposed$random)
print("The Multiplicative Model")
ur.kpss(decompose(ts(product8$sold_count,frequency= 7), type="mul")$random)
print("Linear Regression")
residuals <- residuals(lm8)
ur.kpss(residuals)
decomposed <- decompose(ts(train8$sold_count,frequency= 7))
acf(decomposed$random, lag = 14, na.action = na.pass)
pacf(decomposed$random, lag = 14, na.action = na.pass)
arima <- auto.arima(decomposed$random)
arima
checkresiduals(arima)
pred <- arima$fitted + decomposed$seasonal + decomposed$trend
ggplot() + geom_line(aes( x= train7[1:length(pred)]$event_date, y= train7[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train7[1:length(pred)]$event_date, y= pred, color= "Predicted")) + labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for arima(0,0,1)(0,0,2)[7]"
) + theme_minimal()
arima
ggplot() + geom_line(aes( x= train8[1:length(pred)]$event_date, y= train8[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train8[1:length(pred)]$event_date, y= pred, color= "Predicted")) + labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for ARIMA(5,0,0)"
) + theme_minimal()
reg_arima <- auto.arima(decomposed$random, xreg = xreg8[1:(length(decomposed$random))])
reg_arima
checkresiduals(reg_arima)
pred <- reg_arima$fitted + decomposed$seasonal + decomposed$trend
ggplot() + geom_line(aes( x= train8[1:length(pred)]$event_date, y= train8[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train8[1:length(pred)]$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for arima model with regressors"
) + theme_minimal()
acf(decomposed$random, lag = 14, na.action = na.pass)
pacf(decomposed$random, lag = 14, na.action = na.pass)
arima <- auto.arima(decomposed$random)
arima
checkresiduals(arima)
pred <- arima$fitted + decomposed$seasonal + decomposed$trend
ggplot() + geom_line(aes( x= train8[1:length(pred)]$event_date, y= train8[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train8[1:length(pred)]$event_date, y= pred, color= "Predicted")) + labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted by Arima combined with Linear Regression"
) + theme_minimal()
acf(residuals)
pacf(residuals)
lm_arima <- auto.arima(residuals)
lm_arima
checkresiduals(lm_arima)
pred <- lm_arima$fitted + lm8$fitted.values
ggplot() + geom_line(aes( x= train7$event_date, y= train7$sold_count, color= "Actual")) + geom_line(aes( x= train7$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for linear model and arima combination"
)  + theme_minimal()
ggplot() + geom_line(aes( x= train8$event_date, y= train8$sold_count, color= "Actual")) + geom_line(aes( x= train8$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for linear model and arima combination"
)  + theme_minimal()
error8 =  data.table()
for(i in 3:(length(prediction8))){
error8 <- rbind(error8, accu(test8$sold_count,prediction8[,..i],colnames(prediction8[,..i])))
}
prediction8 <- data.table("event_date" = test_dates,"actual"= product8[event_date %in% test_dates]$sold_count, "sqrt_forecasted_sold"= c(1:length(test_dates)), "BoxCox_forecasted_sold"= c(1:length(test_dates)), "lm_forecasted_sold"= c(1:length(test_dates)), "forecasted_lm8_arima"= c(1:length(test_dates)) )
prediction8[, add_arima_forecasted := 0]
prediction8[ , mul_arima_forecasted := 0]
prediction8[, reg_add_arima_forecasted := 0]
prediction8[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
prediction8$sqrt_forecasted_sold[i]<- forecasted$forecast^2
forecasted=forecast_BoxCox8(past_data,forecast_data)
prediction8$BoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
forecasted=forecast_lm8(past_data,forecast_data)
prediction8$lm_forecasted_sold[i]<- forecasted$forecast
prediction8$forecasted_lm8_arima[i] <- forecast_lm8_arima(past_data,forecast_data)
prediction8$add_arima_forecasted[i] <- add_arima(past_data,1,7)
prediction8$reg_add_arima_forecasted[i] <- xreg_add_arima(past_data,1,7,xreg8)
prediction8$mul_arima_forecasted[i] <- mul_arima(past_data,1,7)
prediction8$reg_mul_arima_forecasted[i] <-xreg_mul_arima(past_data,1,7,xreg8)
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction8,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction8,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction8,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox")) +
geom_line(data = prediction8,aes( x = event_date,y =forecasted_lm8_arima, color = " lm_arima")) +
geom_line(data = prediction8,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = prediction8,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))+
labs(
x= "time",
y= "sales",
main= "Predictions vs. Actual Values"
) +
theme_minimal()
error8 =  data.table()
for(i in 3:(length(prediction8))){
error8 <- rbind(error8, accu(test8$sold_count,prediction8[,..i],colnames(prediction8[,..i])))
}
error8
prediction8 <- data.table("event_date" = test_dates,"actual"= product8[event_date %in% test_dates]$sold_count, "sqrt_forecasted_sold"= c(1:length(test_dates)), "BoxCox_forecasted_sold"= c(1:length(test_dates)), "lm_forecasted_sold"= c(1:length(test_dates)), "forecasted_lm8_arima"= c(1:length(test_dates)) )
prediction8[, add_arima_forecasted := 0]
prediction8[ , mul_arima_forecasted := 0]
prediction8[, reg_add_arima_forecasted := 0]
prediction8[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
prediction8$sqrt_forecasted_sold[i]<- forecasted$forecast^2
forecasted=forecast_BoxCox8(past_data,forecast_data)
prediction8$BoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
forecasted=forecast_lm8(past_data,forecast_data)
prediction8$lm_forecasted_sold[i]<- round(forecasted$forecast)
prediction8$forecasted_lm8_arima[i] <-round( forecast_lm8_arima(past_data,forecast_data))
prediction8$add_arima_forecasted[i] <- round(add_arima(past_data,1,7))
prediction8$reg_add_arima_forecasted[i] <- round(xreg_add_arima(past_data,1,7,xreg8))
prediction8$mul_arima_forecasted[i] <- round(mul_arima(past_data,1,7))
prediction8$reg_mul_arima_forecasted[i] <- round(xreg_mul_arima(past_data,1,7,xreg8))
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction8,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction8,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction8,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox")) +
geom_line(data = prediction8,aes( x = event_date,y =forecasted_lm8_arima, color = " lm_arima")) +
geom_line(data = prediction8,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = prediction8,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))+
labs(
x= "time",
y= "sales",
main= "Predictions vs. Actual Values"
) +
theme_minimal()
prediction8 <- data.table("event_date" = test_dates,"actual"= product8[event_date %in% test_dates]$sold_count, "sqrt_forecasted_sold"= c(1:length(test_dates)), "BoxCox_forecasted_sold"= c(1:length(test_dates)), "lm_forecasted_sold"= c(1:length(test_dates)), "forecasted_lm8_arima"= c(1:length(test_dates)) )
prediction8[, add_arima_forecasted := 0]
prediction8[ , mul_arima_forecasted := 0]
prediction8[, reg_add_arima_forecasted := 0]
prediction8[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
prediction8$sqrt_forecasted_sold[i]<- forecasted$forecast^2
forecasted=forecast_BoxCox8(past_data,forecast_data)
prediction8$BoxCox_forecasted_sold[i]<- round(InvBoxCox(forecasted$forecast, lambda = lambda))
forecasted=forecast_lm8(past_data,forecast_data)
prediction8$lm_forecasted_sold[i]<- round(forecasted$forecast)
prediction8$forecasted_lm8_arima[i] <-round(forecast_lm8_arima(past_data,forecast_data))
prediction8$add_arima_forecasted[i] <- round(add_arima(past_data,1,7))
prediction8$reg_add_arima_forecasted[i] <- round(xreg_add_arima(past_data,1,7,xreg8))
prediction8$mul_arima_forecasted[i] <- round(mul_arima(past_data,1,7))
prediction8$reg_mul_arima_forecasted[i] <- round(xreg_mul_arima(past_data,1,7,xreg8))
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction8,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction8,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction8,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox")) +
geom_line(data = prediction8,aes( x = event_date,y =forecasted_lm8_arima, color = " lm_arima")) +
geom_line(data = prediction8,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = prediction8,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))+
labs(
x= "time",
y= "sales",
main= "Predictions vs. Actual Values"
) +
theme_minimal()
prediction8 <- data.table("event_date" = test_dates,"actual"= product8[event_date %in% test_dates]$sold_count, "sqrt_forecasted_sold"= c(1:length(test_dates)), "BoxCox_forecasted_sold"= c(1:length(test_dates)), "lm_forecasted_sold"= c(1:length(test_dates)), "forecasted_lm8_arima"= c(1:length(test_dates)) )
prediction8[, add_arima_forecasted := 0]
prediction8[ , mul_arima_forecasted := 0]
prediction8[, reg_add_arima_forecasted := 0]
prediction8[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product8[event_date<=current_date]
forecast_data=product8[event_date==test_dates[i]]
forecasted=forecast_lm8_sqrt(past_data,forecast_data)
prediction8$sqrt_forecasted_sold[i]<- round(forecasted$forecast^2)
forecasted=forecast_BoxCox8(past_data,forecast_data)
prediction8$BoxCox_forecasted_sold[i]<- round(InvBoxCox(forecasted$forecast, lambda = lambda))
forecasted=forecast_lm8(past_data,forecast_data)
prediction8$lm_forecasted_sold[i]<- round(forecasted$forecast)
prediction8$forecasted_lm8_arima[i] <-round(forecast_lm8_arima(past_data,forecast_data))
prediction8$add_arima_forecasted[i] <- round(add_arima(past_data,1,7))
prediction8$reg_add_arima_forecasted[i] <- round(xreg_add_arima(past_data,1,7,xreg8))
prediction8$mul_arima_forecasted[i] <- round(mul_arima(past_data,1,7))
prediction8$reg_mul_arima_forecasted[i] <- round(xreg_mul_arima(past_data,1,7,xreg8))
}
ggplot() + geom_line(data = product8[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction8,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction8,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction8,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox")) +
geom_line(data = prediction8,aes( x = event_date,y =forecasted_lm8_arima, color = " lm_arima")) +
geom_line(data = prediction8,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = prediction8,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = prediction8,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))+
labs(
x= "time",
y= "sales",
main= "Predictions vs. Actual Values"
) +
theme_minimal()
error8 =  data.table()
for(i in 3:(length(prediction8))){
error8 <- rbind(error8, accu(test8$sold_count,prediction8[,..i],colnames(prediction8[,..i])))
}
error8
summary(product9)
product9[is.na(price)]$price <- mean(product9[(!is.na(price)) & (price>= 0) ]$price)
product9[price<=0]$price <- mean(product9[!is.na(price)]$price)
corr_graph(product9)
xreg9 <- product9[ , c( "price","category_sold",  "basket_count","category_favored" )]
xreg9 <- as.matrix(xreg9)
graph1(9)
summary(product9)
product9[is.na(price)]$price <- mean(product9[(!is.na(price)) & (price>= 0) ]$price)
product9[price<=0]$price <- mean(product9[!is.na(price)]$price)
corr_graph(product9)
xreg9 <- product9[ , c( "price","category_sold",  "basket_count","category_favored" )]
xreg9 <- as.matrix(xreg9)
product9[,trend := 1:.N]
product9[ty_visits==1, ty_visits:= mean(ty_visits)]
product9 [, lag1:= shift(sold_count,1)]
product9[is.na(lag1), lag1 := 0]
product9 [, lag2:= shift(sold_count,2)]
product9[is.na(lag2), lag2 := mean(sold_count[1]) ]
product9 [, lag3:= shift(sold_count,3)]
product9[is.na(lag3), lag3 := mean(sold_count[1:2]) ]
product9 [, lag7:= shift(sold_count,7)]
product9[is.na(lag7), lag7 := mean(sold_count[1:6]) ]
product9[, sqrt:= sqrt(sold_count)]
lambda <- BoxCox.lambda(product9$sold_count)
product9[, BoxCox := BoxCox(sold_count,lambda = lambda)]
test_dates <- tail(product9,15)$event_date
nextday <- tail(product9,1)
train9 <-  product9[!(event_date %in% test_dates)]
test_dates <- test_dates[1:14]
test9 <- product9[event_date %in% test_dates][1:14]
forecast_ahead <- 1
autoplot(ts(product9$sold_count))
lm9 <- lm( sold_count ~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold  + factor(w_day)  + factor(mon) + trend  +   lag1 +  lag3   ,product9 )
summary(lm9)
checkresiduals(lm9)
autoplot(ts(product9$sqrt))
sqrt_lm <- lm(sqrt~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3     , product9[4:.N] )
summary(sqrt_lm)
checkresiduals(sqrt_lm)
autoplot(ts(product9$BoxCox))
BoxCox_lm <- lm(BoxCox~price  +  visit_count    +  basket_count  + favored_count  + category_visits + category_basket  + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3
, product9[4:.N] )
summary(BoxCox_lm)
checkresiduals(BoxCox_lm)
autoplot(ts(product9$sold_count))
lm9 <- lm( sold_count ~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold  + factor(w_day)  + factor(mon) + trend  +   lag1 +  lag3  + factor(is_campaign), train9)
summary(lm9)
checkresiduals(lm9)
plot(train9$sold_count, lm9$fitted)
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count), color = "blue") + geom_line( aes( x = train9$event_date,y = lm9$fitted), color = "red")
autoplot(ts(product9$sqrt))
sqrt_lm9 <- lm(sqrt ~  price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3 + factor(is_campaign), data = train9)
summary(sqrt_lm9)
checkresiduals(sqrt_lm9)
plot(train9$sold_count, (sqrt_lm9$fitted)^2)
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count), color = "blue") + geom_line( aes( x = train9$event_date,y = (sqrt_lm9$fitted)^2), color = "red")
autoplot(ts(product9$BoxCox))
BoxCox_lm9 <- lm(BoxCox~ price  +  visit_count    +  basket_count  + favored_count  + category_visits + category_basket  + ty_visits + factor(w_day)  + factor(mon)  + factor(is_campaign)+   lag1 +  lag3 ,train9)
summary(BoxCox_lm9)
checkresiduals(BoxCox_lm9)
plot(train9$sold_count, InvBoxCox(BoxCox_lm9$fitted, lambda = lambda))
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count), color = "blue") +
geom_line( aes( x = train9$event_date,y = InvBoxCox(BoxCox_lm9$fitted, lambda = lambda)), color = "red")
prediction9 <- data.table("event_date" = test_dates,"actual"= product9[event_date %in% test_dates]$sold_count, "sqrt_forecasted_sold"= c(1:length(test_dates)), "BoxCox_forecasted_sold"= c(1:length(test_dates)), "lm_forecasted_sold"= c(1:length(test_dates)), "forecasted_lm9_arima"= c(1:length(test_dates)) )
prediction9[, add_arima_forecasted := 0]
prediction9[ , mul_arima_forecasted := 0]
prediction9[, reg_add_arima_forecasted := 0]
prediction9[ ,reg_mul_arima_forecasted := 0]
for(i in 1:length(test_dates)){
current_date=test_dates[i]-forecast_ahead
past_data=product9[event_date<=current_date]
forecast_data=product9[event_date==test_dates[i]]
forecasted=forecast_lm9_sqrt(past_data,forecast_data)
prediction9$sqrt_forecasted_sold[i]<- forecasted$forecast^2
forecasted=forecast_BoxCox9(past_data,forecast_data)
prediction9$BoxCox_forecasted_sold[i]<- InvBoxCox(forecasted$forecast, lambda = lambda)
forecasted=forecast_lm9(past_data,forecast_data)
prediction9$lm_forecasted_sold[i]<- forecasted$forecast
prediction9$forecasted_lm9_arima[i] <- forecast_lm9_arima(past_data,forecast_data)
prediction9$add_arima_forecasted[i] <- add_arima(past_data,1,7)
prediction9$reg_add_arima_forecasted[i] <- xreg_add_arima(past_data,1,7,xreg9)
prediction9$mul_arima_forecasted[i] <- mul_arima(past_data,1,7)
prediction9$reg_mul_arima_forecasted[i] <-xreg_mul_arima(past_data,1,7,xreg9)
}
ggplot() + geom_line(data = product9[event_date %in% test_dates], aes(x= event_date, y = sold_count)) +
geom_line(data = prediction9,aes( x = event_date,y =sqrt_forecasted_sold, color = "Sqrt"))+
geom_line(data = prediction9,aes( x = event_date,y =lm_forecasted_sold, color = "No Transformation")) +
geom_line(data = prediction9,aes( x = event_date,y =BoxCox_forecasted_sold, color = "BoxCox")) +
geom_line(data = prediction9,aes( x = event_date,y =forecasted_lm9_arima, color = " lm_arima")) +
geom_line(data = prediction9,aes( x = event_date,y = add_arima_forecasted, color = "add_arima_forecasted"))+
geom_line(data = prediction9,aes( x = event_date,y =mul_arima_forecasted, color = "mul_arima_forecasted")) +
geom_line(data = prediction9,aes( x = event_date,y = reg_add_arima_forecasted, color = "reg_add_arima_forecasted"))+
geom_line(data = prediction9,aes( x = event_date,y =reg_mul_arima_forecasted , color = "reg_mul_arima_forecasted"))
error9 =  data.table()
for(i in 3:(length(prediction9))){
error9 <- rbind(error9, accu(test9$sold_count,prediction9[,..i],colnames(prediction9[,..i])))
}
error9
## forcast next day
nextday_pred <-c(
"add_arima" = add_arima(product9,1,7),
"mul_arima" = mul_arima(product9,1,7),
"xreg_mul_arima" = xreg_mul_arima(product9,1,7, xreg9),
"xreg_add_arima" = xreg_add_arima(product9,1,7, xreg9),
"forecast_lm" =forecast_lm9(product9,nextday)$forecast,
"forecast_lm_arima" = forecast_lm9_arima(product9,nextday)[1],
"BoxCox_lm" = InvBoxCox(forecast_BoxCox9(product9,nextday)$forecast, lambda = lambda),
"Sqrt_lm" = (forecast_lm9_sqrt(product9,nextday)$forecast)^2
)
nextday_pred
autoplot(ts(product9$sold_count))
lm9 <- lm( sold_count ~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold  + factor(w_day)  + factor(mon) + trend  +   lag1 +  lag3   ,product9 )
summary(lm9)
checkresiduals(lm9)
autoplot(ts(product9$sqrt))
sqrt_lm <- lm(sqrt~ price  +  visit_count    +  basket_count  + favored_count + category_sold + category_visits + category_basket + category_favored + category_brand_sold + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3     , product9[4:.N] )
summary(sqrt_lm)
checkresiduals(sqrt_lm)
ggplot() + geom_line(data = train9, aes(x = event_date, y = sold_count, color = "Actual")) + geom_line( aes( x = train9$event_date,y = (sqrt_lm9$fitted)^2, color = "Fitted"))+ labs(
x= "sales",
y= "sales",
main = "Actual vs. Fitted Values for LM model with sqrt() transformation"
) + theme_minimal()
autoplot(ts(product9$BoxCox))
BoxCox_lm <- lm(BoxCox~price  +  visit_count    +  basket_count  + favored_count  + category_visits + category_basket  + ty_visits + factor(w_day)  + factor(mon)  +   lag1 +  lag3
, train9)
summary(BoxCox_lm)
checkresiduals(BoxCox_lm)
print("The Additive Model")
decomposed <- decompose(ts(product9$sold_count,frequency= 7))
ur.kpss(decomposed$random)
print("The Multiplicative Model")
ur.kpss(decompose(ts(product9$sold_count,frequency= 7), type="mul")$random)
print("Linear Regression")
residuals <- residuals(lm9)
ur.kpss(residuals)
decomposed <- decompose(ts(train9$sold_count,frequency= 7))
acf(decomposed$random, lag = 14, na.action = na.pass)
pacf(decomposed$random, lag = 14, na.action = na.pass)
arima <- auto.arima(decomposed$random)
arima
checkresiduals(arima)
pred <- arima$fitted + decomposed$seasonal + decomposed$trend
ggplot() + geom_line(aes( x= train8[1:length(pred)]$event_date, y= train8[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train8[1:length(pred)]$event_date, y= pred, color= "Predicted")) + labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted by Arima combined with Linear Regression"
) + theme_minimal()
acf(decomposed$random, lag = 14, na.action = na.pass)
pacf(decomposed$random, lag = 14, na.action = na.pass)
arima <- auto.arima(decomposed$random)
arima
checkresiduals(arima)
pred <- arima$fitted + decomposed$seasonal + decomposed$trend
ggplot() + geom_line(aes( x= train9[1:length(pred)]$event_date, y= train9[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train9[1:length(pred)]$event_date, y= pred, color= "Predicted")) + labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted by Arima combined with Linear Regression"
) + theme_minimal()
acf(residuals)
pacf(residuals)
lm_arima <- auto.arima(residuals)
lm_arima
checkresiduals(lm_arima)
pred <- lm_arima$fitted + lm8$fitted.values
acf(residuals)
pacf(residuals)
lm_arima <- auto.arima(residuals)
lm_arima
checkresiduals(lm_arima)
pred <- lm_arima$fitted + lm9$fitted.values
ggplot() + geom_line(aes( x= train9$event_date, y= train8$sold_count, color= "Actual")) + geom_line(aes( x= train9$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for linear model and arima combination"
)  + theme_minimal()
acf(residuals)
pacf(residuals)
lm_arima <- auto.arima(residuals)
lm_arima
checkresiduals(lm_arima)
pred <- lm_arima$fitted + lm9$fitted.values
ggplot() + geom_line(aes( x= train9$event_date, y= train9$sold_count, color= "Actual")) + geom_line(aes( x= train9$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for linear model and arima combination"
)  + theme_minimal()
acf(residuals)
pacf(residuals)
lm_arima <- auto.arima(residuals)
lm_arima
checkresiduals(lm_arima)
pred <- lm_arima$fitted + lm9$fitted.values
ggplot() + geom_line(aes( x= train9[1:length(pred)]$event_date,  x= train9[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes(  x= train9[1:length(pred)]$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for linear model and arima combination"
)  + theme_minimal()
acf(residuals)
pacf(residuals)
lm_arima <- auto.arima(residuals)
lm_arima
checkresiduals(lm_arima)
pred <- lm_arima$fitted + lm9$fitted.values
ggplot() + geom_line(aes( x= train9[1:length(pred)]$event_date,  y= train9[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes(  x= train9[1:length(pred)]$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for linear model and arima combination"
)  + theme_minimal()
reg_arima <- auto.arima(decomposed$random, xreg = xreg9[1:(length(decomposed$random))])
reg_arima
checkresiduals(reg_arima)
pred <- reg_arima$fitted + decomposed$seasonal + decomposed$trend
ggplot() + geom_line(aes( x= train9[1:length(pred)]$event_date, y= train9[1:length(pred)]$sold_count, color= "Actual")) + geom_line(aes( x= train9[1:length(pred)]$event_date, y= pred, color= "Predicted"))+ labs(
x= "time",
y= "sales",
main = "Actual vs. Predicted Values for arima model with regressors"
) + theme_minimal()
rawdata %>% distinct(event_date, product_content_id, .keep_all = TRUE)
