rawdata <- unite(rawdata,"time", 1:2, sep = " ")
rawdata = rawdata %>%
mutate(time = as_datetime(rawdata$time, format = "%d.%m.%Y %H:%M")) %>%
mutate_at(vars(time), funs(year, month, quarter, week, day,hour))
rawdata <- rawdata[time < "2021-05-20 00:00"]
rawdata = rawdata %>%
mutate( seasons = factor(quarter, labels = c("Winter", "Spring","Summer", "Fall")))
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(data.table)
library(dplyr)
library(ggplot2)
library(knitr)
library(tidyr)
library(tidyverse)
library(scales)
library(ggcorrplot)
library(forecast)
library(urca)
library(zoo)
rawdata <- read.csv("C:/Users/seyma/OneDrive/Belgeler/GitHub/spring21-seymacakir/files/homework-3/homework-3.csv", header = TRUE,sep = ",")
rawdata  <- data.table(rawdata)
names(rawdata)<- c("date", "hours","consumption")
View(rawdata)
rawdata$consumption <- as.numeric(gsub(",","", rawdata$consumption,fixed=TRUE))
rawdata <- unite(rawdata,"time", 1:2, sep = " ")
View(rawdata)
rawdata = rawdata %>%
mutate(time = as_datetime(rawdata$time, format = "%d.%m.%Y %H:%M")) %>%
mutate_at(vars(time), funs(year, month, quarter, week, day,hour))
rawdata <- rawdata[time < "2021-05-20 00:00"]
rawdata = rawdata %>%
mutate( seasons = factor(quarter, labels = c("Winter", "Spring","Summer", "Fall")))
rawdata <- rawdata[time < "2021-05-19 23:00:00"]
rawdata <- rawdata[time < "2021-05-20 04:00:00"]
rawdata = rawdata[,time < "2021-05-20"]
rawdata = rawdata[time < "2021-05-20"]
rawdata <- read.csv("C:/Users/seyma/OneDrive/Belgeler/GitHub/spring21-seymacakir/files/homework-3/homework-3.csv", header = TRUE,sep = ",")
rawdata  <- data.table(rawdata)
names(rawdata)<- c("date", "hours","consumption")
rawdata$consumption <- as.numeric(gsub(",","", rawdata$consumption,fixed=TRUE))
rawdata <- unite(rawdata,"time", 1:2, sep = " ")
rawdata$consumption <- as.numeric(gsub(",","", rawdata$consumption,fixed=TRUE))
rawdata <- unite(rawdata,"time", 1:2, sep = " ")
rawdata = rawdata %>%
mutate(time = as_datetime(rawdata$time, format = "%d.%m.%Y %H:%M")) %>%
mutate_at(vars(time), funs(year, month, quarter, week, day,hour))
rawdata = rawdata[time <="2021-05-20 00:00:00"]
View(rawdata)
rawdata <- read.csv("C:/Users/seyma/OneDrive/Belgeler/GitHub/spring21-seymacakir/files/homework-3/homework-3.csv", header = TRUE,sep = ",")
rawdata  <- data.table(rawdata)
names(rawdata)<- c("date", "hours","consumption")
View(rawdata)
rawdata <- read.csv("C:/Users/seyma/OneDrive/Belgeler/GitHub/spring21-seymacakir/files/homework-3/homework-3.csv", header = TRUE,sep = ",")
rawdata  <- data.table(rawdata)
names(rawdata)<- c("date", "hours","consumption")
View(rawdata)
rawdata$consumption <- as.numeric(gsub(",","", rawdata$consumption,fixed=TRUE))
rawdata <- unite(rawdata,"time", 1:2, sep = " ")
View(rawdata)
rawdata = rawdata %>%
mutate(time = as_datetime(rawdata$time, format = "%d.%m.%Y %H:%M")) %>%
mutate_at(vars(time), funs(year, month, quarter, week, day,hour))
View(rawdata)
rawdata = rawdata[time < "2021-05-20 00:00:00"]
View(rawdata)
rawdata <- read.csv("C:/Users/seyma/OneDrive/Belgeler/GitHub/spring21-seymacakir/files/homework-3/homework-3.csv", header = TRUE,sep = ",")
rawdata  <- data.table(rawdata)
names(rawdata)<- c("date", "hours","consumption")
rawdata$consumption <- as.numeric(gsub(",","", rawdata$consumption,fixed=TRUE))
rawdata <- unite(rawdata,"time", 1:2, sep = " ")
rawdata = rawdata %>%
mutate(time = as_datetime(rawdata$time, format = "%d.%m.%Y %H:%M")) %>%
mutate_at(vars(time), funs(year, month, quarter, week, day,hour))
rawdata = rawdata[1:47184]
View(rawdata)
rawdata = rawdata %>%
mutate( seasons = factor(quarter, labels = c("Winter", "Spring","Summer", "Fall")))
zeroconsumpiton <- which(rawdata$consumption == 0)[[1]]
rawdata[zeroconsumpiton]$consumption <- (rawdata[zeroconsumpiton-1]$consumption + rawdata[zeroconsumpiton+1]$consumption) /2
ggplot(rawdata, aes(x = time, y = consumption, color = seasons)) + geom_line() +
labs(
x = "Time",
y = "Volume of Consumption",
main = "Hourly Electiricty Consumption of Turkey over 2016-2021",
caption = "EPIAS"
)
ggplot(rawdata[1:64], aes(x = time, y = consumption)) + geom_line() +
labs(
x = "Time",
y = "Electricity Consumption",
title = "Hourly Electricity Consumption"
)+
theme_minimal()
df <- rawdata
hourly <- ts(df$consumption, frequency = 24, start(2016,1,1,1,0) )
ggsubseriesplot(hourly) +
ylab("Volume of Hourly Electricity") +
ggtitle(" Hourly Electricity Consumption")
ggtsdisplay(hourly)
print("the addtive model")
ur.kpss(decompose(hourly, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(hourly, type = "mul")$random)
decomposed_hourly <- decompose(hourly, type = "add")
autoplot(decomposed_hourly)
acf(decomposed_hourly$random,na.action = na.pass)
pacf(decomposed_hourly$random, na.action = na.pass)
print("the addtive model")
ur.kpss(decompose(hourly, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(hourly, type = "mul")$random)
decomposed_hourly <- decompose(hourly, type = "add")
autoplot(decomposed_hourly)
acf(decomposed_hourly$random,na.action = na.pass)
pacf(decomposed_hourly$random, na.action = na.pass)
daily <- df %>%  group_by(year,month,day) %>% summarize( daily_consumption = sum(consumption)) %>% as.data.table()
ggplot(daily[1:21], aes(x = day, y = daily_consumption)) + geom_line() +
labs(
x = "Time",
y = "Electricity Consumption",
title = "Daily Electricity Consumption during 21 Days"
)+
theme_minimal()
gglagplot(daily$daily_consumption)
tsdaily <- ts(daily$daily_consumption, frequency = 7, start(2016,1,1))
ggsubseriesplot(tsdaily) +
ylab("electricity") +
ggtitle(" Daily Electricity Consumption")
acf(daily$daily_consumption)
pacf(daily$daily_consumption)
gglagplot(daily$daily_consumption)
tsdaily <- ts(daily$daily_consumption, frequency = 7, start(2016,1,1))
ggsubseriesplot(tsdaily) +
ylab("electricity") +
ggtitle(" Daily Electricity Consumption")
acf(daily$daily_consumption)
pacf(daily$daily_consumption)
print("the additive model")
ur.kpss(decompose(tsdaily, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(tsdaily, type = "mul")$random)
weekly <- df %>%  group_by(year,week) %>% summarize(weekly_consumption = mean(consumption))
tsweekly <- ts(weekly$weekly_consumption, frequency = 53, start = c(2016,1))
autoplot(tsweekly) + ylab("Consumpotion") + ggtitle("Weekly Electiricity Consumption")
acf(weekly$weekly_consumption, lag = 53)
pacf(weekly$weekly_consumption, lag = 53)
ggsubseriesplot(tsweekly) +
ylab(" Volume of Electricity Consumption ") +
ggtitle(" Weekly Electricity Consumption ")
print("the additive model")
ur.kpss(decompose(tsweekly, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(tsweekly, type = "mul")$random)
decomposed_weekly <- decompose(tsweekly, type = "mul")
autoplot(decomposed_weekly)
acf(decomposed_weekly$random, lag = 53,  na.action = na.pass)
pacf(decomposed_weekly$random, lag = 53,na.action = na.pass)
monthly <- df %>% group_by(year,month) %>% summarize(monthly_consumption = mean(consumption))
tsmonthly <- ts(monthly$monthly_consumption, frequency = 12, start = c(2016,1))
autoplot(tsmonthly) + ylab("Consumption") + ggtitle(" Monthly Electricity Consumption")
ggsubseriesplot(tsmonthly) +
ylab(" Volume of Electricity Consumption ") +
ggtitle(" Monthly Electricity Consumption ")
acf(monthly$monthly_consumption, lag = 24 )
pacf(monthly$monthly_consumption, lag = 24)
gglagplot(monthly$monthly_consumption, lags = 12)
print("the additive model")
ur.kpss(decompose(tsmonthly, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(tsmonthly, type = "mul")$random)
decomposed_monthly <-  decompose(tsmonthly, type = "mul")
autoplot(decomposed_monthly)
acf(decomposed_monthly$random, na.action = na.pass)
pacf(decomposed_monthly$random, na.action = na.pass)
View(rawdata)
knitr::opts_chunk$set(include = TRUE, echo = FALSE )
df <- rawdata[ 1:46848]
summary(ur.kpss(df$consumption))
acf(df$consumption, lag = 2*24*7)
ts_data<- ts( df$consumption, frequency = 7*24 , start = c(2016))
autoplot(ts_data)
print("the additive model")
ur.kpss(decompose(ts_data, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(ts_data, type = "mul")$random)
ts_data<- ts( df$consumption, frequency = 7*24 , start = c(2016,1,1,0))
autoplot(ts_data)
print("the additive model")
ur.kpss(decompose(ts_data, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(ts_data, type = "mul")$random)
ts_data<- ts( df$consumption, frequency = 7*24 )
autoplot(ts_data)
print("the additive model")
ur.kpss(decompose(ts_data, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(ts_data, type = "mul")$random)
ts_data<- ts( df$consumption, frequency = 7*24, start = c(2016,1,1,0) )
autoplot(ts_data)
print("the additive model")
ur.kpss(decompose(ts_data, type = "add")$random)
print("the multiplicative model")
ur.kpss(decompose(ts_data, type = "mul")$random)
add <- decompose(ts_data, type = "add")
autoplot(add) + ggtitle("Additive Decomposition Method") + theme_minimal()
acf(add$random, lag = 24*7,na.action = na.pass)
pacf(add$random,lag = 24*7, na.action = na.pass)
msts_cons<- msts(df$consumption, seasonal.periods = c(24, 24*7))
decomposed_msts <- mstl(msts_cons)
autoplot(decomposed_msts)
print("Multiple Seasonal Effect Method")
randommsts <- decomposed_msts[,5]
ur.kpss(randommsts)
acf(randommsts,lag = 2*24*7, na.action = na.pass)
pacf(randommsts,lag = 2*24*7, na.action = na.pass)
AR <- data.table("AIC" =  rep(0,9))
for (i in 1:9 ){
model <- arima(randommsts,c(i,0,0))
print(paste( " in model order = (",i,0,0 , ") AIC = ", model$aic))
AR$AIC[i] <- model$aic
}
ggplot(AR, aes(x = c(1,2,3,4,5,6,7,8,9), y = AIC)) + geom_line() +
labs(
x = "AR(p)",
y = "AIC",
title = "AIC values of Autoregressive Models"
) +
scale_x_continuous(name="AR(p)",breaks=c(1,2,3,4,5,6,7,8,9)) +
theme_minimal()
MA <- data.table("AIC" = rep(0,9))
for (i in 1:9 ){
model <- arima(randommsts,c(0,0,i))
print(paste( " in model order = (",0,0,i , ") AIC = ", model$aic))
MA[i] <-  model$aic
}
ggplot(MA, aes(x = c(1,2,3,4,5,6,7,8,9), y = AIC)) + geom_line() +
labs(
x = "MA(q)",
y = "AIC",
title = "AIC values of Moving Average"
) +
scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9)) +
theme_minimal()
print( paste(" # of differencing needed is" , ndiffs(randommsts)))
ARMA <- c( "1,0,1" = arima(randommsts, c(1,0,1))$aic,
"2,0,1" = arima(randommsts,c(2,0,1))$aic,
"1,0,2" =  arima(randommsts, c(1,0,2))$aic,
"2,0,1" = arima(randommsts, c(2,0,1))$aic,
"2,0,2" = arima(randommsts, c(2,0,2))$aic,
"3,0,2" = arima(randommsts, c(3,0,2))$aic,
"2,0,3" = arima(randommsts, c(2,0,3))$aic,
"3,0,3" = arima(randommsts, c(3,0,3))$aic,
"1,0,3" = arima(randommsts, c(1,0,3))$aic,
"3,0,1" = arima(randommsts, c(3,0,1))$aiC )
print(ARMA)
AICvalues <- data.table("AIC" = c(AR$AIC,MA$AIC,ARMA), "Models" = c("1,0,0", "2,0,0", "3,0,0", "4,0,0", "5,0,0", "6,0,0", "7,0,0","8,0,0","9,0,0",
"0,0,1","0,0,2","0,0,3","0,0,4", "0,0,5","0,0,6", "0,0,7","0,0,8","0,0,9",
names(ARMA)))
AICvalues <- AICvalues[order(AIC)]
print(AICvalues[1])
ggplot(AICvalues[order(AIC)], aes( x = Models, y = AIC)) + geom_point( ) +
#geom_abline(slope = 0, intercept = AICvalues[which.min(AIC)]$AIC, color = "red") +
#geom_vline(slope = 1, xintercept = AICvalues[which.min(AIC)]$Models, color = "red") +
labs(
y = "AIC",
title = "AIC values of different ARIMA models"
) + theme( text.element.x = element_blank()) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
AICvalues <- data.table("AIC" = c(AR[1:5]$AIC,MA[1:5]$AIC,ARMA), "Models" = c("1,0,0", "2,0,0", "3,0,0", "4,0,0", "5,0,0",
"0,0,1","0,0,2","0,0,3","0,0,4", "0,0,5",
names(ARMA)))
AICvalues <- AICvalues[order(AIC)]
print(AICvalues[1])
ggplot(AICvalues[order(AIC)], aes( x = Models, y = AIC)) + geom_point( ) +
geom_abline(slope = 0, intercept = AICvalues[which.min(AIC)]$AIC, color = "red") +
geom_vline(slope = 1, xintercept = AICvalues[which.min(AIC)]$Models, color = "red") +
labs(
y = "AIC",
title = "AIC values of different ARIMA models"
) + theme( text.element.x = element_blank()) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
model <- arima(randommsts, order = c(3,0,3))
checkresiduals(model)
print(mean(model$residuals))
model <- arima(randommsts, order = c(3,0,2))
checkresiduals(model)
model <- arima(randommsts, order = c(3,0,3))
checkresiduals(model)
trend <- as.numeric(decomposed_msts[,2])
season24 <- as.numeric(decomposed_msts[,3])
season168 <- as.numeric(decomposed_msts[,4])
model_fitted <- randommsts - residuals(model)
model_fitted_transformed <- model_fitted + trend + season24 + season168
fitted <- data.table( "Date" = df$time, "RealConsumption" = df$consumption, "ModelFitted" = model_fitted_transformed)
ggplot() +
geom_line(data = fitted, aes(x = Date, y = RealConsumption), color = "yellow")+
geom_line(data = fitted, aes(x = Date, y = ModelFitted), color = "blue", alpha=  0.5 ) +
labs(
x = "Time",
y= "Consumption",
title = "Real Consumption vs. Model Fitted Values"
)+
theme_minimal()
predicted <- predict(model, n.ahead  = 14*24)$pred
wday(df$time[1])
wday(tail(df$time,1))
trend<- rep((tail(trend[!is.na(trend)],1)),14*24)
trend<- rep((tail(trend[!is.na(trend)],1)),14*24)
seasonality <- (season24[(length(season24)-14*24):length(season24)] + season168[(length(season168)-14*24):length(season168)])
transformedpredicted <- data.table("predicted"=  predicted + trend + seasonality, "Date" = seq.POSIXt(
from=as.POSIXct("2021-05-06 0:00", tz="UTC"),
by="hour",
length.out = 14*24
) )
length(predicted)
trend<- rep((tail(trend[!is.na(trend)],1)),14*24 + 1)
seasonality <- (season24[(length(season24)-14*24 + 1):length(season24)] + season168[(length(season168)-14*24):length(season168)])
trend<- rep((tail(trend[!is.na(trend)],1)),14*24 + 1)
seasonality <- (season24[(length(season24)-14*24 + 1):length(season24)] + season168[(length(season168)-14*24 + 1):length(season168)])
length(predicted)
transformedpredicted <- data.table("predicted"=  predicted + trend + seasonality, "Date" = seq.POSIXt(
from=as.POSIXct("2021-05-06 0:00", tz="UTC"),
by="hour",
length.out = 14*24
) )
length(seasonality)
length(trend)
trend<- rep((tail(trend[!is.na(trend)],1)),14*24)
seasonality <- (season24[(length(season24)-14*24 + 1):length(season24)] + season168[(length(season168)-14*24 + 1):length(season168)])
length(seasonality)
length(trend)
predicted <- predict(model, n.ahead  = 14*24)$pred
trend<- rep((tail(trend[!is.na(trend)],1)),14*24)
seasonality <- (season24[(length(season24)-14*24 + 1):length(season24)] + season168[(length(season168)-14*24 + 1):length(season168)])
transformedpredicted <- data.table("predicted"=  predicted + trend + seasonality, "Date" = seq.POSIXt(
from=as.POSIXct("2021-05-06 0:00", tz="UTC"),
by="hour",
length.out = 14*24
) )
ggplot() + geom_line(data = df, aes(x = time, y= consumption), color = "blue")  +
geom_line(data = transformedpredicted, aes( x= Date, y = predicted), color= "red")
actual <- rawdata[time>= "2021-05-06 23-00" & time < "2021-05-20 00:00"]
ggplot() + geom_line(data = transformedpredicted, aes( x= Date, y = predicted, color = "Predicted")) +
geom_line(data = actual, aes(x = time, y= consumption, color = "Actual"))  +
labs(
x = "Time",
y = "Consumption",
title = "The Hourly Electricity Consumption between 2021-05-06 and 2021-05-20"
) + theme_minimal()
dailyactual <- actual %>% group_by(date(time)) %>% summarize( Consumption = mean(consumption)) %>% data.table()
names(dailyactual) = c("Date","Consumption")
dailypredcited <- transformedpredicted %>% group_by(date(Date)) %>% summarize( Consumption = mean(predicted)) %>% data.table()
names(dailypredcited) =  c("Date","Consumption")
ggplot() + geom_line(data = dailypredcited, aes( x= Date, y = Consumption, color = "Predicted")) +
geom_line(data = dailyactual, aes(x = Date, y= Consumption, color = "Actual"))  +
labs(
x = "Time",
y = "Consumption",
title = "The Daily Average Electricity Consumption between 2021-05-06 and 2021-05-20"
) + theme_minimal()
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
accu(dailyactual$consumption,dailypredcited$Consumption)
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
}
accu(dailyactual$consumption,dailypredcited$Consumption)
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
}
accu(dailyactual$consumption,dailypredcited$Consumption)
knitr::opts_chunk$set(include = FALSE, echo = TRUE )
knitr::opts_chunk$set( echo = TRUE )
x <- as.numeric( dailyactual$Consumption)
y <- as.numeric(dailypredcited$Consumption)
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
}
accu(x,y)
dailyactual
dailypredcited
dailyactual <- actual %>% group_by(date(time)) %>% summarize( Consumption = mean(consumption)) %>% data.table()
names(dailyactual) = c("Date","Consumption")
dailypredcited <- transformedpredicted %>% group_by(date(Date)) %>% summarize( Consumption = mean(predicted)) %>% data.table()
names(dailypredcited) =  c("Date","Consumption")
ggplot() + geom_line(data = dailypredcited, aes( x= Date, y = Consumption, color = "Predicted")) +
geom_line(data = dailyactual, aes(x = Date, y= Consumption, color = "Actual"))  +
labs(
x = "Time",
y = "Consumption",
title = "The Daily Average Electricity Consumption between 2021-05-06 and 2021-05-20"
) + theme_minimal()
n=length(actual)
x <- as.numeric( dailyactual$Consumption)
y <- as.numeric(dailypredcited$Consumption)
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
}
accu(x,y)
View(dailypredcited)
View(dailyactual)
x <- as.numeric( dailyactual[-1]$Consumption)
y <- as.numeric(dailypredcited$Consumption)
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
}
accu(x,y)
dailyactual <- actual %>% group_by(date(time)) %>% summarize( Consumption = mean(consumption)) %>% data.table()
names(dailyactual) = c("Date","Consumption")
dailyactual<- dailyactual[-1]
dailypredcited <- transformedpredicted %>% group_by(date(Date)) %>% summarize( Consumption = mean(predicted)) %>% data.table()
names(dailypredcited) =  c("Date","Consumption")
ggplot() + geom_line(data = dailypredcited, aes( x= Date, y = Consumption, color = "Predicted")) +
geom_line(data = dailyactual, aes(x = Date, y= Consumption, color = "Actual"))  +
labs(
x = "Time",
y = "Consumption",
title = "The Daily Average Electricity Consumption between 2021-05-06 and 2021-05-20"
) + theme_minimal()
x <- as.numeric( dailyactual[-1]$Consumption)
y <- as.numeric(dailypredcited$Consumption)
accu=function(actual,forecast){
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
FBias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
RMSE=sqrt(sum(error^2)/n)
MAD=sum(abs(error))/n
MADP=sum(abs(error))/sum(abs(actual))
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,FBias,MAPE,RMSE,MAD,MADP,WMAPE)
return(l)
}
accu(x,y)
